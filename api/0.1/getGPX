#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Copyright 2009 Christoph BÃ¶hme, Mitja Kleider
#
# This file is part of Openstreetbugs.
#
# Openstreetbugs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Openstreetbugs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Openstreetbugs.  If not, see <http://www.gnu.org/licenses/>.
#

import MySQLdb
import cgi
import re

import db_config # DATABASE CONFIGURATION

def main():
	print "Content-type: application/xml"
	print "Content-Disposition: attachment; filename=\"OpenStreetBugs.gpx\"\n"
	
	print """<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<gpx xmlns="http://www.topografix.com/GPX/1/1" creator="OpenStreetBugs" version="1.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd">"""
	
	
	form = cgi.FieldStorage()
	
	values = {}
	values["b"] = form.getfirst("b", "")
	values["t"] = form.getfirst("t", "")
	values["l"] = form.getfirst("l", "")
	values["r"] = form.getfirst("r", "")

	# Check that parameters have a valid format:
	coord_exp = re.compile(r"^-?\d{1,3}(\.\d+)?$")
	for k, v in values.iteritems():
		if not coord_exp.match(v):
			print "<!-- invalid or missing %s -->" % k
			print "</gpx>"
			return
		else:
			values[k] = float(v)
	
	# check whether key "open" exists
	if form.has_key('open'): # return only open bugs
		filter = "type = 0 AND "
	else:
		filter = ""
	
	limit = form.getfirst("limit" , "1000")
	# check for valid format of optional parameter limit
	limit_exp = re.compile(r"^-?\d+?$")
	if not limit_exp.match(limit):
		print "<!-- invalid limit -->"
		print "</gpx>"
		return
#        else:
#                print "<!-- limit: %s -->" %limit

	if int(limit) > 100000: # maximum limit is 100000
		limit = "100000"
	
	conn = MySQLdb.connect(db_config.host, user=db_config.user, passwd=db_config.password, db=db_config.dbname)
	curs = conn.cursor()
	querystr = "SELECT id, lon, lat, text, type, last_changed, type, nearby_place FROM bugs WHERE %s%%(b)s <= lat and lat <= %%(t)s and %%(l)s <= lon and lon <= %%(r)s ORDER BY last_changed DESC" % filter
	querystr += " LIMIT %s" % limit
	curs.execute(querystr, values)
	for c in curs:
		if c[4] == 1:
			type = "closed bug"
		elif c[3].find("<hr />") != -1:
                        type = "new comment"
		else:
			type = "new bug"

		print "<wpt lon=\"%f\" lat=\"%f\"><name><![CDATA[ %s (near %s)]]></name><desc><![CDATA[%s]]></desc><extensions><closed>%s</closed><id>%s</id></extensions></wpt>" % (c[1], c[2], type, c[7].encode("utf-8"), c[3], c[6], c[0] )
	
	print "</gpx>"

main()
